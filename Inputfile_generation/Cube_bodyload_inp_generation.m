clear all
close all
clc

format long

% declare global variables...
global L D H ndof
L=1;D=1;H=1;

% Load the mesh file
load cube_bodyloadmesh.mat 
node=Node;
element=Element;

% Generate the .inp file 
nfiles=1;
for i=1:1:nfiles
fname=strcat('cube_bodyload','.inp')
numnode=size(node,1);
numelem=size(element,1);
fileID = fopen(fname,'w') ;

% material property...
E = 1; nu = 0.3; 
ndof = 3 ;
props = [1 E nu];
m3 = 1; m4 = 1; m5 = 1; m6 = 1; m7 = 1; m8 = 1;
cnt = 1;
for iel = 1:numelem
    econ = element{iel};
    nn = length(econ);
    
    if nn == 6
        P3(m3,:) = econ ;
        m3 = m3 + 1;
    elseif nn == 8
        P4(m4,:) = econ ;
        m4 = m4 + 1 ;
    elseif nn == 10
        P5(m5,:) = econ ;
        m5 = m5 + 1 ;
    elseif nn == 12
        P6(m6,:) = econ;
        m6 = m6 + 1 ;
    elseif nn == 14
        P7(m7,:) = econ;
        m7 = m7 + 1 ;
    elseif nn == 16
        P8(m8,:) = econ;
        m8 = m8 + 1;
    end

    numSide(cnt,1) = nn;
    cnt = cnt + 1 ;
end

maxEleSide = max(numSide);
minEleSide = min(numSide);
uniNumSide = unique(numSide);

% element type and mesh generation ends here

% get boundary nodes
clear bnodes
tol = 1e-06;
FrontNodes = find( abs( node(:,2) - min(node(:,2)))< tol);
BackNodes= find( abs ( node(:,2) - max(node(:,2)))< tol);
TopNodes= find( abs( node(:,3) - max(node(:,3)))< tol);
BotNodes= find( abs( node(:,3) - min(node(:,3)))< tol);
RightNodes = find( abs( node(:,1) - max(node(:,1)))< tol);
LeftNodes = find( abs( node(:,1) - min(node(:,1)))< tol);

bnodes = unique([BotNodes; RightNodes; TopNodes; LeftNodes; BackNodes; FrontNodes ]);

end

%--------------- write to the file
fprintf(fileID,'*Heading\n');
fprintf(fileID,'3D\n');
fprintf(fileID,'** Job name: Job-1 Model name: Plate\n');
fprintf(fileID,'** Generated by: Abaqus/CAE 6.12-3\n');
fprintf(fileID,'*Preprint, echo=NO, model=NO, history=NO, contact=NO\n');
fprintf(fileID,'**\n');
fprintf(fileID,'** PARTS\n');
fprintf(fileID,'**\n');
fprintf(fileID,'**Part, name=Part-1\n');
fprintf(fileID,'*Node,NSET=NALL\n');

% write the nodal coordinates...
for in = 1:numnode
    fprintf(fileID,'%d,  %16.16f,   %16.16f,   %16.16f\n',in,node(in,1),node(in,2), node(in,3));
end

% element information
for iel = 1:length(uniNumSide)
    nel = uniNumSide(iel);
    fprintf(fileID,'*User element, nodes=%d, type=U%d, properties=3,coordinates=3, variables=7\n',nel,nel);
    fprintf(fileID,'1,2,3\n');
end

numElCnt = 1;
for iel = 1:length(uniNumSide)
    
    % get the number of nodes
    nel = uniNumSide(iel);
    
    if nel == 6
        Elmset = 'six';
        fprintf(fileID,'*Element, type=U%d,ELSET=%s\n',nel,Elmset);
        
        for iel = 1:size(P3,1)
            econ = P3(iel,:);
            fprintf(fileID,'%d,%d,%d,%d,%d,%d,%d\n',numElCnt,econ);
            numElCnt= numElCnt + 1;
        end
        
        % material property for this element type
        fprintf(fileID,'*UEL Property, ELSET=%s\n',Elmset);
        fprintf(fileID,'%d, %6.4e,  %3.2f\n',props);
        
    elseif nel == 8
        Elmset = 'eight';
        fprintf(fileID,'*Element, type=U%d,ELSET=%s\n',nel,Elmset);
       
        for iel = 1:size(P4,1)
            econ = P4(iel,:) ;
            fprintf(fileID,'%d,%d,%d,%d,%d,%d,%d,%d,%d\n',numElCnt,econ);
            numElCnt= numElCnt + 1;
        end
        
        % material property for this element type
        fprintf(fileID,'*UEL Property, ELSET=%s\n',Elmset);
        fprintf(fileID,'%d, %6.4e,  %3.2f\n',props);
        
    elseif nel == 10
        Elmset = 'ten';
        fprintf(fileID,'*Element, type=U%d,ELSET=%s\n',nel,Elmset);

        for iel = 1:size(P5,1)
            econ = P5(iel,:) ;
            fprintf(fileID,'%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n',numElCnt,econ);
            numElCnt= numElCnt + 1;
        end
        
        % material property for this element type
        fprintf(fileID,'*UEL Property, ELSET=%s\n',Elmset);
        fprintf(fileID,'%d, %6.4e,  %3.2f\n',props);
        
    elseif nel == 12
        Elmset = 'twelve';

        fprintf(fileID,'*Element, type=U%d,ELSET=%s\n',nel,Elmset);

        for iel = 1:size(P6,1)
            econ = P6(iel,:) ;
            fprintf(fileID,'%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n',numElCnt,econ);
            numElCnt= numElCnt + 1;
        end
        
        % material property for this element type
        fprintf(fileID,'*UEL Property, ELSET=%s\n',Elmset);
        fprintf(fileID,'%d, %6.4e,  %3.2f\n',props);
        
    elseif nel == 14
        Elmset = 'fourteen';
        fprintf(fileID,'*Element, type=U%d,ELSET=%s\n',nel,Elmset);

        for iel = 1:size(P7,1)
            econ = P7(iel,:) ;
            fprintf(fileID,'%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n',numElCnt,econ);
            numElCnt= numElCnt + 1;
        end
        
        % material property for this element type
        fprintf(fileID,'*UEL Property, ELSET=%s\n',Elmset);
        fprintf(fileID,'%d, %6.4e,  %3.2f\n',props);
        
    elseif nel == 16
        Elmset = 'sixteen';
 
        fprintf(fileID,'*Element, type=U%d,ELSET=%s\n',nel,Elmset);

        for iel = 1:size(P8,1)
            econ = P8(iel,:) ;
            fprintf(fileID,'%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n',numElCnt,econ);
            numElCnt= numElCnt + 1;
        end 
        
        % material property for this element type
        fprintf(fileID,'*UEL Property, ELSET=%s\n',Elmset);
        fprintf(fileID,'%d, %6.4e,  %3.2f\n',props);
    end

end


% create node sets...
fprintf(fileID,'*Nset, nset=Set-1\n');
fprintf(fileID,'%d,  %d,%d\n',1,  numnode, 1);
fprintf(fileID,'*Elset, elset=Set-1, generate\n');
fprintf(fileID,'%d,%d,%d\n',1,numelem,1);

fprintf(fileID,'*Step, name=Step-1,NLGEOM=YES\n');
fprintf(fileID,'*Static\n');
fprintf(fileID,'1., 1., 1., 1.\n');
fprintf(fileID,'** \n');
fprintf(fileID,'** BOUNDARY CONDITIONS\n');
fprintf(fileID,'** \n');
fprintf(fileID,'** Name: BC-1 Type: Displacement/Rotation\n');
fprintf(fileID,'*Boundary\n');


%%% Applying boundary conditions %%%
for i=1:length(bnodes) 
    
    cn = bnodes(i);
    x = node(bnodes(i),1);
    y = node(bnodes(i),2);
    z = node(bnodes(i),3);
    u1 = 0.1+0.1*x+0.2*y+0.2*z;
    u2 = 0.05+0.15*x+0.1*y+0.2*z;
    u3 = 0.05+0.1*x+0.2*y+0.2*z;
    fprintf(fileID,'%d,  %d,, %16.16f\n',cn,1,u1);
    fprintf(fileID,'%d,  %d,, %16.16f\n',cn,2,u2);
    fprintf(fileID,'%d,  %d,, %16.16f\n',cn,3,u3);

end

%--- output request
fprintf(fileID,'** OUTPUT REQUESTS\n');
fprintf(fileID,'** \n');
fprintf(fileID,'*Restart, write, frequency=0\n');
fprintf(fileID,'** \n');
fprintf(fileID,'** FIELD OUTPUT: F-Output-1\n');
fprintf(fileID,'** \n');
fprintf(fileID,'*Output, field, variable=PRESELECT\n');
fprintf(fileID,'** \n');
fprintf(fileID,'** HISTORY OUTPUT: H-Output-1\n');
fprintf(fileID,'** \n');
fprintf(fileID,'*Output, history, variable=PRESELECT\n');
fprintf(fileID,'*NODE PRINT, NSET=NALL\n');
fprintf(fileID,'U1,U2,U3 \n');
fprintf(fileID,'*End Step\n');

% close the file...all is done :)
fclose(fileID);
